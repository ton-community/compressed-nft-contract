#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";


global int storage::merkle_root;
global int storage::merkle_depth;
global cell storage::nft_item_code;
global slice storage::owner;
global cell storage::content;
global cell storage::royalty;
global cell storage::api_data;

const int error::not_owner = 100;
const int error::bad_proof = 101;
const int error::value_too_low = 102;
const int error::index_too_high = 103;

const int op::claim = "op::claim"c;
const int op::update = "op::update"c;

const int item_init_value = 30000000;
const int minimum_claim_value = 85000000;

() load_data() impure {
    slice ds = get_data().begin_parse();

    storage::merkle_root = ds~load_uint(256);
    storage::merkle_depth = ds~load_uint(8);
    storage::nft_item_code = ds~load_ref();
    storage::owner = ds~load_msg_addr();
    storage::content = ds~load_ref();
    storage::royalty = ds~load_ref();
    storage::api_data = ds~load_ref();

    ds.end_parse();
}

() save_data() impure {
    set_data(begin_cell()
        .store_uint(storage::merkle_root, 256)
        .store_uint(storage::merkle_depth, 8)
        .store_ref(storage::nft_item_code)
        .store_slice(storage::owner)
        .store_ref(storage::content)
        .store_ref(storage::royalty)
        .store_ref(storage::api_data)
        .end_cell());
}

int hash_nodes(int a, int b) {
    return begin_cell().store_uint(a, 256).store_uint(b, 256).end_cell().cell_hash();
}

int check_proof(int root, cell proof, int leaf, int leaf_index, int depth) {
    int i = 0;
    int cur = leaf;
    slice ps = proof.begin_parse();
    while (i < depth) {
        int is_right = (leaf_index >> i) & 1;
        if (is_right) {
            cur = hash_nodes(ps.preload_uint(256), cur);
        } else {
            cur = hash_nodes(cur, ps.preload_uint(256));
        }
        ps = ps.preload_ref().begin_parse();
        i += 1;
    }
    return cur == root;
}

(slice, cell) parse_nft_data(cell nft_data) {
    slice ds = nft_data.begin_parse();
    return (ds~load_msg_addr(), ds~load_ref());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(cell state_init) {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(workchain, 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

() deploy_nft_item(int item_index, int amount, cell nft_message) impure {
    cell state_init = calculate_nft_item_state_init(item_index, storage::nft_item_code);
    slice nft_address = calculate_nft_item_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(nft_message);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() claim(int nft_index, cell nft_data, cell proof) impure {
    throw_if(error::index_too_high, nft_index >= (1 << storage::merkle_depth));

    throw_unless(error::bad_proof, check_proof(storage::merkle_root, proof, nft_data.cell_hash(), nft_index, storage::merkle_depth));

    (slice owner, cell content) = nft_data.parse_nft_data();

    deploy_nft_item(nft_index, item_init_value, begin_cell().store_slice(owner).store_ref(content).end_cell());
}

(int, int) process_update(cell update, tuple zh, int depth) {
    slice cs = update.begin_parse();
    int leaf = cs~load_int(1);
    if (leaf) {
        int proof = cs~load_int(1);
        int hash = cs~load_uint(256);
        if (proof) {
            return (hash, hash);
        } else { ;; update
            return (zh.at(depth), hash);
        }
    } else {
        (int old_left, int new_left) = process_update(cs~load_ref(), zh, depth - 1);
        (int old_right, int new_right) = process_update(cs~load_ref(), zh, depth - 1);
        return (hash_nodes(old_left, old_right), hash_nodes(new_left, new_right));
    }
}

() update(cell update) impure {
    tuple zh = empty_tuple();
    zh~tpush(0);
    int i = 0;
    while (i < storage::merkle_depth - 1) {
        int prev = zh.at(i);
        zh~tpush(hash_nodes(prev, prev));
        i += 1;
    }

    (int old_hash, int new_hash) = process_update(update, zh, storage::merkle_depth);

    throw_unless(error::bad_proof, old_hash == storage::merkle_root);

    storage::merkle_root = new_hash;

    save_data();
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
        .store_slice(to_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::report_royalty_params(), 32)
        .store_uint(query_id, 64)
        .store_slice(data);
    send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::claim) {
        throw_unless(error::value_too_low, msg_value >= minimum_claim_value);

        slice proof_data = in_msg_body~load_ref().begin_parse();
        claim(in_msg_body~load_uint(256), proof_data~load_ref(), proof_data~load_ref());
        return ();
    }

    if (op == op::update) {
        throw_unless(error::not_owner, equal_slices(sender_address, storage::owner));
        update(in_msg_body~load_ref());

        var msg = begin_cell()
            .store_uint(0x18, 6) 
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
        send_raw_message(msg.end_cell(), 64);
        return ();
    }

    if (op == op::withdraw) {
        throw_unless(error::not_owner, equal_slices(sender_address, storage::owner));
        
        raw_reserve(50000000, 0);

        var msg = begin_cell()
            .store_uint(0x18, 6) 
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
        send_raw_message(msg.end_cell(), 128);
        return ();
    }

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, storage::royalty.begin_parse());
        return ();
    }

    throw(0xffff);
}

(int, cell, slice) get_collection_data() method_id {
    load_data();
    slice cs = storage::content.begin_parse();
    return (-1, cs~load_ref(), storage::owner);
}

slice get_nft_address_by_index(int index) method_id {
    load_data();
    cell state_init = calculate_nft_item_state_init(index, storage::nft_item_code);
    return calculate_nft_item_address(state_init);
}

(int, int, slice) royalty_params() method_id {
    load_data();
    slice rs = storage::royalty.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    load_data();
    slice cs = storage::content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
            .store_uint(1, 8) ;; offchain tag
            .store_slice(common_content)
            .store_ref(individual_nft_content)
            .end_cell());
}

int get_merkle_root() method_id {
    load_data();
    return storage::merkle_root;
}

(int, cell) get_nft_api_info() method_id {
    load_data();
    slice cs = storage::api_data.begin_parse();
    int version = cs~load_uint(8);
    cell link = cs~load_ref();
    return (version, link);
}
